{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport Layout from \"../../components/Layout\";\nimport Campaign from \"../../ethereum/campaign\";\nimport { Card, Grid, Button } from \"semantic-ui-react\";\nimport web3 from \"../../ethereum/web3\";\nimport ContributeForm from \"../../components/ContributeForm\";\nimport { Link } from \"../../routes\";\n\nconst CampaignShow = props => {\n  const renderCards = () => {\n    const {\n      minimunContribution,\n      balance,\n      requestCount,\n      approversCount,\n      manager\n    } = props;\n    const items = [{\n      header: manager,\n      meta: \"Address of Manager\",\n      description: \"The manager created this campaign and can only create requests\",\n      style: {\n        overflowWrap: \"break-word\"\n      }\n    }, {\n      header: minimunContribution,\n      meta: \"Minimum Contribution (wei)\",\n      description: \"You must contribute atleast this wei to become a approver.\"\n    }, {\n      header: requestCount,\n      meta: \"No. of requests\",\n      description: \"It is a request tries to withdraw money from the contract.\"\n    }, {\n      header: approversCount,\n      meta: \"Number of Approvers\",\n      description: \"No. of people that have already donated to this campaign.\"\n    }, {\n      header: web3.utils.fromWei(balance, \"ether\"),\n      meta: \"Campaign balance\",\n      description: \"How much money this campaign has left to spent.\"\n    }];\n    return __jsx(Card.Group, {\n      items: items\n    });\n  };\n\n  return __jsx(Layout, null, __jsx(\"h3\", null, \"Campaign Show\"), __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, {\n    width: 10\n  }, renderCards()), __jsx(Grid.Column, {\n    width: 6\n  }, __jsx(ContributeForm, {\n    address: props.address\n  }))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Link, {\n    route: `/campaigns/${props.address}/requests`\n  }, __jsx(Button, {\n    primary: true\n  }, \"View Requests\"))))));\n};\n\nCampaignShow.getInitialProps = async props => {\n  const address = props.query.address;\n  const campaign = Campaign(address);\n  const summary = await campaign.methods.getSummary().call();\n  return {\n    address: props.query.address,\n    minimunContribution: summary[0],\n    balance: summary[1],\n    requestCount: summary[2],\n    approversCount: summary[3],\n    manager: summary[4]\n  };\n};\n\nexport default CampaignShow;","map":null,"metadata":{},"sourceType":"module"}