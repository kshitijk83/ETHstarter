{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Layout from \"../../../components/Layout\";\nimport { Button, Table } from \"semantic-ui-react\";\nimport { Link } from \"../../../routes\";\nimport Campaign from \"../../../ethereum/campaign\";\nimport RequestRow from \"../../../components/RequestRow\";\n\nvar RequestIndex = function RequestIndex(props) {\n  var Header = Table.Header,\n      Row = Table.Row,\n      HeaderCell = Table.HeaderCell,\n      Body = Table.Body;\n\n  var renderRow = function renderRow() {\n    return props.requests.map(function (request, index) {\n      return __jsx(RequestRow, {\n        key: index,\n        id: index,\n        approversCount: props.approversCount,\n        request: request,\n        address: props.address\n      });\n    });\n  };\n\n  return __jsx(Layout, null, __jsx(\"h3\", null, \"Requests\"), __jsx(Link, {\n    route: \"/campaigns/\".concat(props.address, \"/requests/new\")\n  }, __jsx(\"a\", null, __jsx(Button, {\n    floated: \"right\",\n    style: {\n      marginBottom: 10\n    },\n    primary: true\n  }, \"Add Request\"))), __jsx(Table, null, __jsx(Header, null, __jsx(Row, null, __jsx(HeaderCell, null, \"ID\"), __jsx(HeaderCell, null, \"Description\"), __jsx(HeaderCell, null, \"Amount\"), __jsx(HeaderCell, null, \"Recipient\"), __jsx(HeaderCell, null, \"Approval Count\"), __jsx(HeaderCell, null, \"Approve\"), __jsx(HeaderCell, null, \"Finalize\"))), __jsx(Body, null, renderRow())), __jsx(\"div\", null, \"Found \", props.requestCount, \" requests\"));\n};\n\nRequestIndex.getInitialProps = function _callee(props) {\n  var address, campaign, requestCount, approversCount, requests;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          address = props.query.address;\n          campaign = Campaign(address);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(campaign.methods.getRequestsCount().call());\n\n        case 4:\n          requestCount = _context.sent;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(campaign.methods.approversCount().call());\n\n        case 7:\n          approversCount = _context.sent;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(_Promise.all(Array(_parseInt(requestCount)).fill().map(function (el, index) {\n            return campaign.methods.requests(index).call();\n          })));\n\n        case 10:\n          requests = _context.sent;\n          return _context.abrupt(\"return\", {\n            address: address,\n            requests: requests,\n            requestCount: requestCount,\n            approversCount: approversCount\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default RequestIndex;","map":null,"metadata":{},"sourceType":"module"}