{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Table, Button } from \"semantic-ui-react\";\nimport web3 from \"../ethereum/web3\";\nimport Campaign from \"../ethereum/campaign\";\n\nvar RequestRow = function RequestRow(props) {\n  var _useState = useState(false),\n      approveLoading = _useState[0],\n      setApproveLoading = _useState[1];\n\n  var _useState2 = useState(false),\n      finalizeLoading = _useState2[0],\n      setFinalizeLoading = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      approveErrMsg = _useState3[0],\n      setApproveErrMsg = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      finalizeErrMsg = _useState4[0],\n      setFinalizeErrMsg = _useState4[1];\n\n  var Row = Table.Row,\n      Cell = Table.Cell;\n  var id = props.id,\n      request = props.request,\n      approversCount = props.approversCount;\n  var readyToFinalize = request.approvalCount > approversCount / 2;\n\n  var onApproveHandler = function onApproveHandler() {\n    var campaign, accounts;\n    return _regeneratorRuntime.async(function onApproveHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            campaign = Campaign(props.address);\n            setApproveLoading(true);\n            setApproveErrMsg(\"\");\n            _context.prev = 3;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(web3.eth.getAccounts());\n\n          case 6:\n            accounts = _context.sent;\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(campaign.methods.approveRequest(props.id).send({\n              from: accounts[0]\n            }));\n\n          case 9:\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](3);\n            setApproveErrMsg(_context.t0.message);\n\n          case 14:\n            setApproveLoading(false);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 11]]);\n  };\n\n  var onFinalizeHandler = function onFinalizeHandler() {\n    var campaign, accounts;\n    return _regeneratorRuntime.async(function onFinalizeHandler$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            campaign = Campaign(props.address);\n            setFinalizeLoading(true);\n            setFinalizeErrMsg(\"\");\n            _context2.prev = 3;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(web3.eth.getAccounts());\n\n          case 6:\n            accounts = _context2.sent;\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(campaign.methods.finalizeRequest(props.id).send({\n              from: accounts[0]\n            }));\n\n          case 9:\n            _context2.next = 14;\n            break;\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](3);\n            setFinalizeErrMsg(_context2.t0.message);\n\n          case 14:\n            setFinalizeLoading(false);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[3, 11]]);\n  };\n\n  return __jsx(Row, {\n    disabled: request.complete,\n    positive: readyToFinalize && !request.complete\n  }, __jsx(Cell, null, id), __jsx(Cell, null, request.description), __jsx(Cell, null, web3.utils.fromWei(request.value, \"ether\")), __jsx(Cell, null, request.recipient), __jsx(Cell, null, \"\".concat(request.approvalCount, \"/\").concat(approversCount)), __jsx(Cell, null, request.complete ? null : __jsx(React.Fragment, null, __jsx(Button, {\n    loading: approveLoading,\n    basic: true,\n    color: \"green\",\n    onClick: onApproveHandler\n  }, \"Approve\"), __jsx(\"p\", null, approveErrMsg))), __jsx(Cell, null, request.complete ? null : __jsx(React.Fragment, null, __jsx(Button, {\n    loading: finalizeLoading,\n    basic: true,\n    color: \"teal\",\n    onClick: onFinalizeHandler\n  }, \"Finalize\"), __jsx(\"p\", null, finalizeErrMsg))));\n};\n\nexport default RequestRow;","map":null,"metadata":{},"sourceType":"module"}