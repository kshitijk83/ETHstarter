{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Table, Button } from \"semantic-ui-react\";\nimport web3 from \"../ethereum/web3\";\nimport Campaign from \"../ethereum/campaign\";\n\nconst RequestRow = props => {\n  const {\n    0: approveLoading,\n    1: setApproveLoading\n  } = useState(false);\n  const {\n    0: finalizeLoading,\n    1: setFinalizeLoading\n  } = useState(false);\n  const {\n    0: approveErrMsg,\n    1: setApproveErrMsg\n  } = useState(\"\");\n  const {\n    0: finalizeErrMsg,\n    1: setFinalizeErrMsg\n  } = useState(\"\");\n  const {\n    Row,\n    Cell\n  } = Table;\n  const {\n    id,\n    request,\n    approversCount\n  } = props;\n  const readyToFinalize = request.approvalCount > approversCount / 2;\n\n  const onApproveHandler = async () => {\n    const campaign = Campaign(props.address);\n    setApproveLoading(true);\n    setApproveErrMsg(\"\");\n\n    try {\n      const accounts = await web3.eth.getAccounts();\n      await campaign.methods.approveRequest(props.id).send({\n        from: accounts[0]\n      });\n    } catch (err) {\n      setApproveErrMsg(err.message);\n    }\n\n    setApproveLoading(false);\n  };\n\n  const onFinalizeHandler = async () => {\n    const campaign = Campaign(props.address);\n    setFinalizeLoading(true);\n    setFinalizeErrMsg(\"\");\n\n    try {\n      const accounts = await web3.eth.getAccounts();\n      await campaign.methods.finalizeRequest(props.id).send({\n        from: accounts[0]\n      });\n    } catch (err) {\n      setFinalizeErrMsg(err.message);\n    }\n\n    setFinalizeLoading(false);\n  };\n\n  return __jsx(Row, {\n    disabled: request.complete,\n    positive: readyToFinalize && !request.complete\n  }, __jsx(Cell, null, id), __jsx(Cell, null, request.description), __jsx(Cell, null, web3.utils.fromWei(request.value, \"ether\")), __jsx(Cell, null, request.recipient), __jsx(Cell, null, `${request.approvalCount}/${approversCount}`), __jsx(Cell, null, request.complete ? null : __jsx(React.Fragment, null, __jsx(Button, {\n    loading: approveLoading,\n    basic: true,\n    color: \"green\",\n    onClick: onApproveHandler\n  }, \"Approve\"), __jsx(\"p\", null, approveErrMsg))), __jsx(Cell, null, request.complete ? null : __jsx(React.Fragment, null, __jsx(Button, {\n    loading: finalizeLoading,\n    basic: true,\n    color: \"teal\",\n    onClick: onFinalizeHandler\n  }, \"Finalize\"), __jsx(\"p\", null, finalizeErrMsg))));\n};\n\nexport default RequestRow;","map":null,"metadata":{},"sourceType":"module"}