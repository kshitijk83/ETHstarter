{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Layout from \"../../../components/Layout\";\nimport { Button, Table } from \"semantic-ui-react\";\nimport { Link } from \"../../../routes\";\nimport Campaign from \"../../../ethereum/campaign\";\nimport RequestRow from \"../../../components/RequestRow\";\n\nconst RequestIndex = props => {\n  const {\n    Header,\n    Row,\n    HeaderCell,\n    Body\n  } = Table;\n\n  const renderRow = () => {\n    return props.requests.map((request, index) => {\n      return __jsx(RequestRow, {\n        key: index,\n        id: index,\n        approversCount: props.approversCount,\n        request: request,\n        address: props.address\n      });\n    });\n  };\n\n  return __jsx(Layout, null, __jsx(\"h3\", null, \"Requests\"), __jsx(Link, {\n    route: `/campaigns/${props.address}/requests/new`\n  }, __jsx(\"a\", null, __jsx(Button, {\n    floated: \"right\",\n    style: {\n      marginBottom: 10\n    },\n    primary: true\n  }, \"Add Request\"))), __jsx(Table, null, __jsx(Header, null, __jsx(Row, null, __jsx(HeaderCell, null, \"ID\"), __jsx(HeaderCell, null, \"Description\"), __jsx(HeaderCell, null, \"Amount\"), __jsx(HeaderCell, null, \"Recipient\"), __jsx(HeaderCell, null, \"Approval Count\"), __jsx(HeaderCell, null, \"Approve\"), __jsx(HeaderCell, null, \"Finalize\"))), __jsx(Body, null, renderRow())), __jsx(\"div\", null, \"Found \", props.requestCount, \" requests\"));\n};\n\nRequestIndex.getInitialProps = async props => {\n  const {\n    address\n  } = props.query;\n  const campaign = Campaign(address);\n  const requestCount = await campaign.methods.getRequestsCount().call();\n  const approversCount = await campaign.methods.approversCount().call();\n  const requests = await _Promise.all(Array(_parseInt(requestCount)).fill().map((el, index) => campaign.methods.requests(index).call()));\n  return {\n    address,\n    requests,\n    requestCount,\n    approversCount\n  };\n};\n\nexport default RequestIndex;","map":{"version":3,"sources":["/home/beast/Desktop/myGithub/kickstarter-ethereum/pages/campaigns/requests/index.js"],"names":["React","Layout","Button","Table","Link","Campaign","RequestRow","RequestIndex","props","Header","Row","HeaderCell","Body","renderRow","requests","map","request","index","approversCount","address","marginBottom","requestCount","getInitialProps","query","campaign","methods","getRequestsCount","call","all","Array","fill","el"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,mBAA9B;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5B,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,GAAV;AAAeC,IAAAA,UAAf;AAA2BC,IAAAA;AAA3B,MAAoCT,KAA1C;;AAEA,QAAMU,SAAS,GAAG,MAAM;AACtB,WAAOL,KAAK,CAACM,QAAN,CAAeC,GAAf,CAAmB,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC5C,aACE,MAAC,UAAD;AACE,QAAA,GAAG,EAAEA,KADP;AAEE,QAAA,EAAE,EAAEA,KAFN;AAGE,QAAA,cAAc,EAAET,KAAK,CAACU,cAHxB;AAIE,QAAA,OAAO,EAAEF,OAJX;AAKE,QAAA,OAAO,EAAER,KAAK,CAACW;AALjB,QADF;AASD,KAVM,CAAP;AAWD,GAZD;;AAcA,SACE,MAAC,MAAD,QACE,6BADF,EAEE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAG,cAAaX,KAAK,CAACW,OAAQ;AAAzC,KACE,iBACE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,OAAhB;AAAwB,IAAA,KAAK,EAAE;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KAA/B;AAAqD,IAAA,OAAO;AAA5D,mBADF,CADF,CAFF,EASE,MAAC,KAAD,QACE,MAAC,MAAD,QACE,MAAC,GAAD,QACE,MAAC,UAAD,aADF,EAEE,MAAC,UAAD,sBAFF,EAGE,MAAC,UAAD,iBAHF,EAIE,MAAC,UAAD,oBAJF,EAKE,MAAC,UAAD,yBALF,EAME,MAAC,UAAD,kBANF,EAOE,MAAC,UAAD,mBAPF,CADF,CADF,EAYE,MAAC,IAAD,QAAOP,SAAS,EAAhB,CAZF,CATF,EAuBE,6BAAYL,KAAK,CAACa,YAAlB,cAvBF,CADF;AA2BD,CA5CD;;AA8CAd,YAAY,CAACe,eAAb,GAA+B,MAAMd,KAAN,IAAe;AAC5C,QAAM;AAAEW,IAAAA;AAAF,MAAcX,KAAK,CAACe,KAA1B;AACA,QAAMC,QAAQ,GAAGnB,QAAQ,CAACc,OAAD,CAAzB;AACA,QAAME,YAAY,GAAG,MAAMG,QAAQ,CAACC,OAAT,CAAiBC,gBAAjB,GAAoCC,IAApC,EAA3B;AACA,QAAMT,cAAc,GAAG,MAAMM,QAAQ,CAACC,OAAT,CAAiBP,cAAjB,GAAkCS,IAAlC,EAA7B;AACA,QAAMb,QAAQ,GAAG,MAAM,SAAQc,GAAR,CACrBC,KAAK,CAAC,UAASR,YAAT,CAAD,CAAL,CACGS,IADH,GAEGf,GAFH,CAEO,CAACgB,EAAD,EAAKd,KAAL,KAAeO,QAAQ,CAACC,OAAT,CAAiBX,QAAjB,CAA0BG,KAA1B,EAAiCU,IAAjC,EAFtB,CADqB,CAAvB;AAKA,SAAO;AAAER,IAAAA,OAAF;AAAWL,IAAAA,QAAX;AAAqBO,IAAAA,YAArB;AAAmCH,IAAAA;AAAnC,GAAP;AACD,CAXD;;AAaA,eAAeX,YAAf","sourcesContent":["import React from \"react\";\nimport Layout from \"../../../components/Layout\";\nimport { Button, Table } from \"semantic-ui-react\";\nimport { Link } from \"../../../routes\";\nimport Campaign from \"../../../ethereum/campaign\";\nimport RequestRow from \"../../../components/RequestRow\";\n\nconst RequestIndex = props => {\n  const { Header, Row, HeaderCell, Body } = Table;\n\n  const renderRow = () => {\n    return props.requests.map((request, index) => {\n      return (\n        <RequestRow\n          key={index}\n          id={index}\n          approversCount={props.approversCount}\n          request={request}\n          address={props.address}\n        />\n      );\n    });\n  };\n\n  return (\n    <Layout>\n      <h3>Requests</h3>\n      <Link route={`/campaigns/${props.address}/requests/new`}>\n        <a>\n          <Button floated=\"right\" style={{ marginBottom: 10 }} primary>\n            Add Request\n          </Button>\n        </a>\n      </Link>\n      <Table>\n        <Header>\n          <Row>\n            <HeaderCell>ID</HeaderCell>\n            <HeaderCell>Description</HeaderCell>\n            <HeaderCell>Amount</HeaderCell>\n            <HeaderCell>Recipient</HeaderCell>\n            <HeaderCell>Approval Count</HeaderCell>\n            <HeaderCell>Approve</HeaderCell>\n            <HeaderCell>Finalize</HeaderCell>\n          </Row>\n        </Header>\n        <Body>{renderRow()}</Body>\n      </Table>\n      <div>Found {props.requestCount} requests</div>\n    </Layout>\n  );\n};\n\nRequestIndex.getInitialProps = async props => {\n  const { address } = props.query;\n  const campaign = Campaign(address);\n  const requestCount = await campaign.methods.getRequestsCount().call();\n  const approversCount = await campaign.methods.approversCount().call();\n  const requests = await Promise.all(\n    Array(parseInt(requestCount))\n      .fill()\n      .map((el, index) => campaign.methods.requests(index).call())\n  );\n  return { address, requests, requestCount, approversCount };\n};\n\nexport default RequestIndex;\n"]},"metadata":{},"sourceType":"module"}