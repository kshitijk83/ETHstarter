{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Layout from '../../components/Layout';\nimport Campaign from '../../ethereum/campaign';\nimport { Card, Grid } from 'semantic-ui-react';\nimport web3 from '../../ethereum/web3';\nimport ContributeForm from '../../components/ContributeForm';\n\nconst CampaignShow = props => {\n  const renderCards = () => {\n    const {\n      minimunContribution,\n      balance,\n      requestCount,\n      approversCount,\n      manager\n    } = props;\n    const items = [{\n      header: manager,\n      meta: 'Address of Manager',\n      description: 'The manager created this campaign and can only create requests',\n      style: {\n        overflowWrap: 'break-word'\n      }\n    }, {\n      header: minimunContribution,\n      meta: 'Minimum Contribution (wei)',\n      description: 'You must contribute atleast this wei to become a approver.'\n    }, {\n      header: requestCount,\n      meta: 'No. of requests',\n      description: 'It is a request tries to withdraw money from the contract.'\n    }, {\n      header: approversCount,\n      meta: 'Number of Approvers',\n      description: 'No. of people that have already donated to this campaign.'\n    }, {\n      header: web3.utils.fromWei(balance, 'ether'),\n      meta: 'Campaign balance',\n      description: 'How much money this campaign has left to spent.'\n    }];\n    return __jsx(Card.Group, {\n      items: items\n    });\n  };\n\n  return __jsx(Layout, null, __jsx(\"h3\", null, \"Campaign Show\"), __jsx(Grid, null, __jsx(Grid.Column, {\n    width: 10\n  }, renderCards()), __jsx(Grid.Column, {\n    width: 6\n  }, __jsx(ContributeForm, {\n    address: props.address\n  }))));\n};\n\nCampaignShow.getInitialProps = async props => {\n  const address = props.query.address;\n  const campaign = Campaign(address);\n  const summary = await campaign.methods.getSummary().call();\n  return {\n    address: props.query.address,\n    minimunContribution: summary[0],\n    balance: summary[1],\n    requestCount: summary[2],\n    approversCount: summary[3],\n    manager: summary[4]\n  };\n};\n\nexport default CampaignShow;","map":{"version":3,"sources":["/home/beast/Desktop/myGithub/kickstarter-ethereum/pages/campaigns/show.js"],"names":["React","Layout","Campaign","Card","Grid","web3","ContributeForm","CampaignShow","props","renderCards","minimunContribution","balance","requestCount","approversCount","manager","items","header","meta","description","style","overflowWrap","utils","fromWei","address","getInitialProps","query","campaign","summary","methods","getSummary","call"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,mBAA3B;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAE5B,QAAMC,WAAW,GAAG,MAAI;AACpB,UAAM;AACFC,MAAAA,mBADE;AAEFC,MAAAA,OAFE;AAGFC,MAAAA,YAHE;AAIFC,MAAAA,cAJE;AAKFC,MAAAA;AALE,QAMFN,KANJ;AAQA,UAAMO,KAAK,GAAE,CACT;AACIC,MAAAA,MAAM,EAAEF,OADZ;AAEIG,MAAAA,IAAI,EAAE,oBAFV;AAGIC,MAAAA,WAAW,EAAE,gEAHjB;AAIIC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,YAAY,EAAE;AAAhB;AAJX,KADS,EAOT;AACIJ,MAAAA,MAAM,EAAEN,mBADZ;AAEIO,MAAAA,IAAI,EAAE,4BAFV;AAGIC,MAAAA,WAAW,EAAE;AAHjB,KAPS,EAYT;AACIF,MAAAA,MAAM,EAAEJ,YADZ;AAEIK,MAAAA,IAAI,EAAE,iBAFV;AAGIC,MAAAA,WAAW,EAAE;AAHjB,KAZS,EAiBT;AACIF,MAAAA,MAAM,EAAEH,cADZ;AAEII,MAAAA,IAAI,EAAE,qBAFV;AAGIC,MAAAA,WAAW,EAAE;AAHjB,KAjBS,EAsBT;AACIF,MAAAA,MAAM,EAAEX,IAAI,CAACgB,KAAL,CAAWC,OAAX,CAAmBX,OAAnB,EAA4B,OAA5B,CADZ;AAEIM,MAAAA,IAAI,EAAE,kBAFV;AAGIC,MAAAA,WAAW,EAAE;AAHjB,KAtBS,CAAb;AA6BA,WAAO,MAAC,IAAD,CAAM,KAAN;AAAY,MAAA,KAAK,EAAEH;AAAnB,MAAP;AACH,GAvCD;;AAyCA,SACI,MAAC,MAAD,QACI,kCADJ,EAEI,MAAC,IAAD,QACI,MAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE;AAApB,KACKN,WAAW,EADhB,CADJ,EAII,MAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE;AAApB,KACI,MAAC,cAAD;AAAgB,IAAA,OAAO,EAAED,KAAK,CAACe;AAA/B,IADJ,CAJJ,CAFJ,CADJ;AAaH,CAxDD;;AA0DAhB,YAAY,CAACiB,eAAb,GAA+B,MAAMhB,KAAN,IAAc;AACzC,QAAMe,OAAO,GAAGf,KAAK,CAACiB,KAAN,CAAYF,OAA5B;AACA,QAAMG,QAAQ,GAAGxB,QAAQ,CAACqB,OAAD,CAAzB;AACA,QAAMI,OAAO,GAAG,MAAMD,QAAQ,CAACE,OAAT,CAAiBC,UAAjB,GAA8BC,IAA9B,EAAtB;AAEA,SAAO;AACHP,IAAAA,OAAO,EAAEf,KAAK,CAACiB,KAAN,CAAYF,OADlB;AAEHb,IAAAA,mBAAmB,EAAEiB,OAAO,CAAC,CAAD,CAFzB;AAGHhB,IAAAA,OAAO,EAAEgB,OAAO,CAAC,CAAD,CAHb;AAIHf,IAAAA,YAAY,EAAEe,OAAO,CAAC,CAAD,CAJlB;AAKHd,IAAAA,cAAc,EAAEc,OAAO,CAAC,CAAD,CALpB;AAMHb,IAAAA,OAAO,EAAEa,OAAO,CAAC,CAAD;AANb,GAAP;AAQH,CAbD;;AAeA,eAAepB,YAAf","sourcesContent":["import React from 'react';\nimport Layout from '../../components/Layout';\nimport Campaign from '../../ethereum/campaign';\nimport { Card, Grid } from 'semantic-ui-react';\nimport web3 from '../../ethereum/web3';\nimport ContributeForm from '../../components/ContributeForm';\n\nconst CampaignShow = (props) => {\n\n    const renderCards = ()=>{\n        const {\n            minimunContribution,\n            balance,\n            requestCount,\n            approversCount,\n            manager\n        } = props;\n\n        const items =[\n            {\n                header: manager,\n                meta: 'Address of Manager',\n                description: 'The manager created this campaign and can only create requests',\n                style: { overflowWrap: 'break-word' }\n            },\n            {\n                header: minimunContribution,\n                meta: 'Minimum Contribution (wei)',\n                description: 'You must contribute atleast this wei to become a approver.'\n            },\n            {\n                header: requestCount,\n                meta: 'No. of requests',\n                description: 'It is a request tries to withdraw money from the contract.'\n            },\n            {\n                header: approversCount,\n                meta: 'Number of Approvers',\n                description: 'No. of people that have already donated to this campaign.'\n            },\n            {\n                header: web3.utils.fromWei(balance, 'ether'),\n                meta: 'Campaign balance',\n                description: 'How much money this campaign has left to spent.'\n            }\n        ]\n\n        return <Card.Group items={items} />\n    }\n\n    return(\n        <Layout>\n            <h3>Campaign Show</h3>\n            <Grid>\n                <Grid.Column width={10}>\n                    {renderCards()}\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <ContributeForm address={props.address} />\n                </Grid.Column>\n            </Grid>\n        </Layout>\n    )\n}\n\nCampaignShow.getInitialProps = async(props)=>{\n    const address = props.query.address;\n    const campaign = Campaign(address);\n    const summary = await campaign.methods.getSummary().call();\n    \n    return {\n        address: props.query.address,\n        minimunContribution: summary[0],\n        balance: summary[1],\n        requestCount: summary[2],\n        approversCount: summary[3],\n        manager: summary[4]\n    }\n}\n\nexport default CampaignShow;"]},"metadata":{},"sourceType":"module"}