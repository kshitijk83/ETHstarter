{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Table, Button } from \"semantic-ui-react\";\nimport web3 from \"../ethereum/web3\";\nimport Campaign from \"../ethereum/campaign\";\n\nvar RequestRow = function RequestRow(props) {\n  var _useState = useState(false),\n      approveLoading = _useState[0],\n      setApproveLoading = _useState[1];\n\n  var _useState2 = useState(false),\n      finalizeLoading = _useState2[0],\n      setFinalizeLoading = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      approveErrMsg = _useState3[0],\n      setApproveErrMsg = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      finalizeErrMsg = _useState4[0],\n      setFinalizeErrMsg = _useState4[1];\n\n  var Row = Table.Row,\n      Cell = Table.Cell;\n  var id = props.id,\n      request = props.request,\n      approversCount = props.approversCount;\n  var readyToFinalize = request.approvalCount > approversCount / 2;\n\n  var onApproveHandler = function onApproveHandler() {\n    var campaign, accounts;\n    return _regeneratorRuntime.async(function onApproveHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            campaign = Campaign(props.address);\n            setApproveLoading(true);\n            setApproveErrMsg(\"\");\n            _context.prev = 3;\n            accounts = web3.eth.getAccounts();\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(campaign.methods.approveRequest(props.id).send({\n              from: accounts[0]\n            }));\n\n          case 7:\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](3);\n            setApproveErrMsg(_context.t0.message);\n\n          case 12:\n            setApproveLoading(false);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 9]]);\n  };\n\n  var onFinalizeHandler = function onFinalizeHandler() {\n    var campaign, accounts;\n    return _regeneratorRuntime.async(function onFinalizeHandler$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            campaign = Campaign(props.address);\n            setFinalizeLoading(true);\n            setFinalizeErrMsg(\"\");\n            _context2.prev = 3;\n            accounts = web3.eth.getAccounts();\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(campaign.methods.finalizeRequest(props.id).send({\n              from: accounts[0]\n            }));\n\n          case 7:\n            _context2.next = 12;\n            break;\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](3);\n            setFinalizeErrMsg(_context2.t0.message);\n\n          case 12:\n            setFinalizeLoading(false);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[3, 9]]);\n  };\n\n  return __jsx(Row, {\n    disabled: request.complete,\n    positive: readyToFinalize && !request.complete\n  }, __jsx(Cell, null, id), __jsx(Cell, null, request.description), __jsx(Cell, null, web3.utils.fromWei(request.value, \"ether\")), __jsx(Cell, null, request.recipient), __jsx(Cell, null, \"\".concat(request.approvalCount, \"/\").concat(approversCount)), __jsx(Cell, null, request.complete ? null : __jsx(React.Fragment, null, __jsx(Button, {\n    loading: approveLoading,\n    basic: true,\n    color: \"green\",\n    onClick: onApproveHandler\n  }, \"Approve\"), __jsx(\"p\", null, approveErrMsg))), __jsx(Cell, null, request.complete ? null : __jsx(React.Fragment, null, __jsx(Button, {\n    loading: finalizeLoading,\n    basic: true,\n    color: \"teal\",\n    onClick: onFinalizeHandler\n  }, \"Finalize\"), __jsx(\"p\", null, finalizeErrMsg))));\n};\n\nexport default RequestRow;","map":{"version":3,"sources":["/home/beast/Desktop/myGithub/kickstarter-ethereum/components/RequestRow.js"],"names":["React","useState","Table","Button","web3","Campaign","RequestRow","props","approveLoading","setApproveLoading","finalizeLoading","setFinalizeLoading","approveErrMsg","setApproveErrMsg","finalizeErrMsg","setFinalizeErrMsg","Row","Cell","id","request","approversCount","readyToFinalize","approvalCount","onApproveHandler","campaign","address","accounts","eth","getAccounts","methods","approveRequest","send","from","message","onFinalizeHandler","finalizeRequest","complete","description","utils","fromWei","value","recipient"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,mBAA9B;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,QAAP,MAAqB,sBAArB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,KAAK,EAAI;AAAA,kBACkBN,QAAQ,CAAC,KAAD,CAD1B;AAAA,MACnBO,cADmB;AAAA,MACHC,iBADG;;AAAA,mBAEoBR,QAAQ,CAAC,KAAD,CAF5B;AAAA,MAEnBS,eAFmB;AAAA,MAEFC,kBAFE;;AAAA,mBAGgBV,QAAQ,CAAC,EAAD,CAHxB;AAAA,MAGnBW,aAHmB;AAAA,MAGJC,gBAHI;;AAAA,mBAIkBZ,QAAQ,CAAC,EAAD,CAJ1B;AAAA,MAInBa,cAJmB;AAAA,MAIHC,iBAJG;;AAAA,MAKlBC,GALkB,GAKJd,KALI,CAKlBc,GALkB;AAAA,MAKbC,IALa,GAKJf,KALI,CAKbe,IALa;AAAA,MAMlBC,EANkB,GAMcX,KANd,CAMlBW,EANkB;AAAA,MAMdC,OANc,GAMcZ,KANd,CAMdY,OANc;AAAA,MAMLC,cANK,GAMcb,KANd,CAMLa,cANK;AAO1B,MAAMC,eAAe,GAAGF,OAAO,CAACG,aAAR,GAAwBF,cAAc,GAAG,CAAjE;;AAEA,MAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,QADiB,GACNnB,QAAQ,CAACE,KAAK,CAACkB,OAAP,CADF;AAEvBhB,YAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAI,YAAAA,gBAAgB,CAAC,EAAD,CAAhB;AAHuB;AAKfa,YAAAA,QALe,GAKJtB,IAAI,CAACuB,GAAL,CAASC,WAAT,EALI;AAAA;AAAA,6CAMfJ,QAAQ,CAACK,OAAT,CAAiBC,cAAjB,CAAgCvB,KAAK,CAACW,EAAtC,EAA0Ca,IAA1C,CAA+C;AACnDC,cAAAA,IAAI,EAAEN,QAAQ,CAAC,CAAD;AADqC,aAA/C,CANe;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUrBb,YAAAA,gBAAgB,CAAC,YAAIoB,OAAL,CAAhB;;AAVqB;AAYvBxB,YAAAA,iBAAiB,CAAC,KAAD,CAAjB;;AAZuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAeA,MAAMyB,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBV,YAAAA,QADkB,GACPnB,QAAQ,CAACE,KAAK,CAACkB,OAAP,CADD;AAExBd,YAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAI,YAAAA,iBAAiB,CAAC,EAAD,CAAjB;AAHwB;AAKhBW,YAAAA,QALgB,GAKLtB,IAAI,CAACuB,GAAL,CAASC,WAAT,EALK;AAAA;AAAA,6CAMhBJ,QAAQ,CAACK,OAAT,CAAiBM,eAAjB,CAAiC5B,KAAK,CAACW,EAAvC,EAA2Ca,IAA3C,CAAgD;AACpDC,cAAAA,IAAI,EAAEN,QAAQ,CAAC,CAAD;AADsC,aAAhD,CANgB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUtBX,YAAAA,iBAAiB,CAAC,aAAIkB,OAAL,CAAjB;;AAVsB;AAYxBtB,YAAAA,kBAAkB,CAAC,KAAD,CAAlB;;AAZwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAeA,SACE,MAAC,GAAD;AACE,IAAA,QAAQ,EAAEQ,OAAO,CAACiB,QADpB;AAEE,IAAA,QAAQ,EAAEf,eAAe,IAAI,CAACF,OAAO,CAACiB;AAFxC,KAIE,MAAC,IAAD,QAAOlB,EAAP,CAJF,EAKE,MAAC,IAAD,QAAOC,OAAO,CAACkB,WAAf,CALF,EAME,MAAC,IAAD,QAAOjC,IAAI,CAACkC,KAAL,CAAWC,OAAX,CAAmBpB,OAAO,CAACqB,KAA3B,EAAkC,OAAlC,CAAP,CANF,EAOE,MAAC,IAAD,QAAOrB,OAAO,CAACsB,SAAf,CAPF,EAQE,MAAC,IAAD,kBAAUtB,OAAO,CAACG,aAAlB,cAAmCF,cAAnC,EARF,EASE,MAAC,IAAD,QACGD,OAAO,CAACiB,QAAR,GAAmB,IAAnB,GACC,4BACE,MAAC,MAAD;AACE,IAAA,OAAO,EAAE5B,cADX;AAEE,IAAA,KAAK,MAFP;AAGE,IAAA,KAAK,EAAC,OAHR;AAIE,IAAA,OAAO,EAAEe;AAJX,eADF,EASE,iBAAIX,aAAJ,CATF,CAFJ,CATF,EAwBE,MAAC,IAAD,QACGO,OAAO,CAACiB,QAAR,GAAmB,IAAnB,GACC,4BACE,MAAC,MAAD;AACE,IAAA,OAAO,EAAE1B,eADX;AAEE,IAAA,KAAK,MAFP;AAGE,IAAA,KAAK,EAAC,MAHR;AAIE,IAAA,OAAO,EAAEwB;AAJX,gBADF,EASE,iBAAIpB,cAAJ,CATF,CAFJ,CAxBF,CADF;AA0CD,CAjFD;;AAmFA,eAAeR,UAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Table, Button } from \"semantic-ui-react\";\nimport web3 from \"../ethereum/web3\";\nimport Campaign from \"../ethereum/campaign\";\n\nconst RequestRow = props => {\n  const [approveLoading, setApproveLoading] = useState(false);\n  const [finalizeLoading, setFinalizeLoading] = useState(false);\n  const [approveErrMsg, setApproveErrMsg] = useState(\"\");\n  const [finalizeErrMsg, setFinalizeErrMsg] = useState(\"\");\n  const { Row, Cell } = Table;\n  const { id, request, approversCount } = props;\n  const readyToFinalize = request.approvalCount > approversCount / 2;\n\n  const onApproveHandler = async () => {\n    const campaign = Campaign(props.address);\n    setApproveLoading(true);\n    setApproveErrMsg(\"\");\n    try {\n      const accounts = web3.eth.getAccounts();\n      await campaign.methods.approveRequest(props.id).send({\n        from: accounts[0]\n      });\n    } catch (err) {\n      setApproveErrMsg(err.message);\n    }\n    setApproveLoading(false);\n  };\n\n  const onFinalizeHandler = async () => {\n    const campaign = Campaign(props.address);\n    setFinalizeLoading(true);\n    setFinalizeErrMsg(\"\");\n    try {\n      const accounts = web3.eth.getAccounts();\n      await campaign.methods.finalizeRequest(props.id).send({\n        from: accounts[0]\n      });\n    } catch (err) {\n      setFinalizeErrMsg(err.message);\n    }\n    setFinalizeLoading(false);\n  };\n\n  return (\n    <Row\n      disabled={request.complete}\n      positive={readyToFinalize && !request.complete}\n    >\n      <Cell>{id}</Cell>\n      <Cell>{request.description}</Cell>\n      <Cell>{web3.utils.fromWei(request.value, \"ether\")}</Cell>\n      <Cell>{request.recipient}</Cell>\n      <Cell>{`${request.approvalCount}/${approversCount}`}</Cell>\n      <Cell>\n        {request.complete ? null : (\n          <>\n            <Button\n              loading={approveLoading}\n              basic\n              color=\"green\"\n              onClick={onApproveHandler}\n            >\n              Approve\n            </Button>\n            <p>{approveErrMsg}</p>\n          </>\n        )}\n      </Cell>\n      <Cell>\n        {request.complete ? null : (\n          <>\n            <Button\n              loading={finalizeLoading}\n              basic\n              color=\"teal\"\n              onClick={onFinalizeHandler}\n            >\n              Finalize\n            </Button>\n            <p>{finalizeErrMsg}</p>\n          </>\n        )}\n      </Cell>\n    </Row>\n  );\n};\n\nexport default RequestRow;\n"]},"metadata":{},"sourceType":"module"}